{"version":3,"sources":["MazeGeneration/Node/Node.jsx","MazeGeneration/algorithms/DFSGeneration.js","MazeGeneration/MazeGeneration.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","row","col","id","className","Component","chooseNeighbors","currentNode","grid","neighbors","getNeighbors","validNeighbors","forEach","neighbor","visited","validateNeighbor","push","randomIdx","Math","floor","random","length","node","checkNeighbors","invalidNeighbors","n","MazeGeneration","state","isAnimating","currentAnimation","gridSize","nodeSize","canvasSize","createGrid","setState","document","getElementById","style","height","width","orderedNodeList","startNode","nodeList","nodes","e","d","getNodes","stack","orderedNodes","console","log","initialNodeIndex","findIndex","element","isStart","pop","newNode","DFSGeneration","animateMaze","animationArr","i","setTimeout","classList","add","clearTimeout","stopAnimations","resetMazeGrid","remove","size","newGridSize","newNodeSize","newGrid","forceUpdate","Navbar","bg","variant","Brand","Button","onClick","visualizeMaze","clearMaze","Container","fluid","Row","Col","map","rowIndex","key","nodeIndex","nodeGrid","rowArr","createNode","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ba26f08d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Node.css\";\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const { row, col } = this.props;\r\n    return <div id={`node-${row}-${col}`} className=\"node\"></div>;\r\n  }\r\n}\r\n","export function DFSGeneration(grid, startNode) {\r\n  //retrive grid from state\r\n  const nodeList = getNodes(grid);\r\n  const stack = [];\r\n  let currentNode;\r\n  let orderedNodes = [];\r\n\r\n  console.log(nodeList);\r\n\r\n  const initialNodeIndex = nodeList.findIndex(\r\n    (element) => element.isStart === true\r\n  );\r\n  //   Choose the initial cell, mark it as visited and push it to the stack\r\n  //   While the stack is not empty\r\n  //       Pop a cell from the stack and make it a current cell\r\n  //       If the current cell has any neighbours which have not been visited\r\n  //           Push the current cell to the stack\r\n  //           Choose one of the unvisited neighbours\r\n  //           Remove the wall between the current cell and the chosen cell\r\n  //           Mark the chosen cell as visited and push it to the stack\r\n\r\n  currentNode = nodeList[initialNodeIndex];\r\n  currentNode.visited = true;\r\n  stack.push(currentNode);\r\n\r\n  while (stack.length > 0) {\r\n    currentNode = stack[stack.length - 1];\r\n    orderedNodes.push(currentNode);\r\n    stack.pop();\r\n    if (checkNeighbors(currentNode, grid)) {\r\n      stack.push(currentNode);\r\n      const newNode = chooseNeighbors(currentNode, grid);\r\n\r\n      newNode.visited = true;\r\n      stack.push(newNode);\r\n    }\r\n  }\r\n  return orderedNodes;\r\n}\r\n\r\nfunction chooseNeighbors(currentNode, grid) {\r\n  const neighbors = getNeighbors(currentNode, grid);\r\n  const validNeighbors = [];\r\n\r\n  neighbors.forEach((neighbor) => {\r\n    if (!neighbor.visited && validateNeighbor(currentNode, neighbor, grid)) {\r\n      validNeighbors.push(neighbor);\r\n    }\r\n  });\r\n\r\n  const randomIdx = Math.floor(Math.random() * validNeighbors.length);\r\n  return validNeighbors[randomIdx];\r\n}\r\n\r\nfunction getNeighbors(node, grid) {\r\n  const { col, row } = node;\r\n  const neighbors = [];\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n\r\n  return neighbors;\r\n}\r\n\r\nfunction checkNeighbors(currentNode, grid) {\r\n  const neighbors = getNeighbors(currentNode, grid);\r\n\r\n  const validNeighbors = [];\r\n\r\n  neighbors.forEach((neighbor) => {\r\n    if (!neighbor.visited && validateNeighbor(currentNode, neighbor, grid)) {\r\n      validNeighbors.push(neighbor);\r\n    }\r\n  });\r\n\r\n  if (validNeighbors.length > 0) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction validateNeighbor(currentNode, neighbor, grid) {\r\n  const { col, row } = neighbor;\r\n  const neighbors = [];\r\n\r\n  if (row > 0 && currentNode !== grid[row - 1][col]) {\r\n    neighbors.push(grid[row - 1][col]);\r\n  }\r\n  if (row < grid.length - 1 && currentNode !== grid[row + 1][col]) {\r\n    neighbors.push(grid[row + 1][col]);\r\n  }\r\n  if (col > 0 && currentNode !== grid[row][col - 1]) {\r\n    neighbors.push(grid[row][col - 1]);\r\n  }\r\n  if (col < grid[0].length - 1 && currentNode !== grid[row][col + 1]) {\r\n    neighbors.push(grid[row][col + 1]);\r\n  }\r\n\r\n  let invalidNeighbors = [];\r\n  neighbors.forEach((n) => {\r\n    if (n.visited === true) {\r\n      invalidNeighbors.push(n);\r\n    }\r\n  });\r\n  if (invalidNeighbors.length > 0) {\r\n    return false;\r\n  } else {\r\n    return true;\r\n  }\r\n}\r\n\r\nfunction getNodes(grid) {\r\n  const nodes = [];\r\n  grid.forEach((e) => {\r\n    e.forEach((d) => {\r\n      nodes.push(d);\r\n    });\r\n  });\r\n  return nodes;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Node from \"./Node/Node\";\r\nimport { DFSGeneration } from \"./algorithms/DFSGeneration\";\r\n\r\nimport \"./MazeGeneration.css\";\r\nimport {\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Nav,\r\n  NavDropdown,\r\n  Navbar,\r\n} from \"react-bootstrap\";\r\n\r\nconst STARTING_NODE_X = 0;\r\nconst STARTING_NODE_Y = 0;\r\n\r\nexport default class MazeGeneration extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      isAnimating: false,\r\n      currentAnimation: [],\r\n      gridSize: 15,\r\n      grid: [],\r\n      nodeSize: \"48px\",\r\n      canvasSize: \"728px\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = createGrid(this.state.gridSize);\r\n    this.setState({ grid });\r\n\r\n    document.getElementById(\r\n      \"mazeContainer\"\r\n    ).style.height = this.state.canvasSize;\r\n    document.getElementById(\r\n      \"mazeContainer\"\r\n    ).style.width = this.state.canvasSize;\r\n\r\n    // document.querySelector(\"body\").style.backgroundColor = \"#252525\";\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.setState({\r\n      grid: [],\r\n    });\r\n  }\r\n\r\n  visualizeMaze() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[STARTING_NODE_X][STARTING_NODE_Y];\r\n    const orderedNodeList = DFSGeneration(grid, startNode);\r\n    this.animateMaze(orderedNodeList);\r\n  }\r\n\r\n  animateMaze(orderedNodeList) {\r\n    const animationArr = [];\r\n    for (let i = 0; i < orderedNodeList.length; i++) {\r\n      animationArr.push(\r\n        setTimeout(() => {\r\n          const node = orderedNodeList[i];\r\n          const nodeElement = document.getElementById(\r\n            `node-${node.row}-${node.col}`\r\n          );\r\n          nodeElement.classList.add(\"node-visited\");\r\n        }, 50 * i)\r\n      );\r\n    }\r\n\r\n    setTimeout(() => {\r\n      const { grid } = this.state;\r\n      for (let row = 0; row < grid.length; row++) {\r\n        for (let col = 0; col < grid[0].length; col++) {\r\n          const node = grid[row][col];\r\n\r\n          if (node.visited) {\r\n            const pathElement = document.getElementById(\r\n              `node-${node.row}-${node.col}`\r\n            );\r\n            pathElement.classList.add(\"is-path\");\r\n          } else {\r\n            const wallElement = document.getElementById(\r\n              `node-${node.row}-${node.col}`\r\n            );\r\n            wallElement.classList.add(\"is-wall\");\r\n          }\r\n        }\r\n      }\r\n\r\n      // document\r\n      //   .getElementById(\"mazeContainer\")\r\n      //   .classList.add(\"mazeContainerAfter\");\r\n    }, 50 * orderedNodeList.length);\r\n\r\n    this.setState({ currentAnimation: animationArr });\r\n  }\r\n\r\n  stopAnimations(animationArr) {\r\n    for (let i = 0; i < animationArr.length; i++) {\r\n      clearTimeout(animationArr[i]);\r\n    }\r\n  }\r\n\r\n  clearMaze() {\r\n    this.stopAnimations(this.state.currentAnimation);\r\n    this.resetMazeGrid(this.state.gridSize);\r\n\r\n    const { grid } = this.state;\r\n    for (let row = 0; row < grid.length; row++) {\r\n      for (let col = 0; col < grid[0].length; col++) {\r\n        const node = grid[row][col];\r\n        const nodeElement = document.getElementById(\r\n          `node-${node.row}-${node.col}`\r\n        );\r\n        nodeElement.classList.remove(\"node-visited\");\r\n      }\r\n    }\r\n  }\r\n\r\n  resetMazeGrid(size) {\r\n    this.stopAnimations(this.state.currentAnimation);\r\n\r\n    const newGridSize = size;\r\n\r\n    this.setState({ gridSize: newGridSize, grid: [] }, () => {\r\n      const newGrid = createGrid(this.state.gridSize);\r\n      let newNodeSize;\r\n\r\n      if (this.state.gridSize === 10) {\r\n        newNodeSize = \"72px\";\r\n      } else if (this.state.gridSize === 15) {\r\n        newNodeSize = \"48px\";\r\n      } else if (this.state.gridSize === 25) {\r\n        newNodeSize = \"28.8px\";\r\n      }\r\n\r\n      this.setState({ grid: newGrid, nodeSize: newNodeSize }, () => {\r\n        for (let row = 0; row < this.state.gridSize; row++) {\r\n          for (let col = 0; col < this.state.gridSize; col++) {\r\n            document.getElementById(\r\n              `node-${row}-${col}`\r\n            ).style.height = this.state.nodeSize;\r\n            document.getElementById(\r\n              `node-${row}-${col}`\r\n            ).style.width = this.state.nodeSize;\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    this.forceUpdate();\r\n  }\r\n\r\n  render() {\r\n    const { grid } = this.state;\r\n\r\n    return (\r\n      <div className=\"body\">\r\n        <Navbar bg=\"dark\" variant=\"dark\">\r\n          <Navbar.Brand>Mazerator</Navbar.Brand>\r\n          <Button\r\n            variant=\"success\"\r\n            onClick={() => {\r\n              this.visualizeMaze();\r\n            }}\r\n          >\r\n            Generate Maze\r\n          </Button>\r\n          <Button\r\n            variant=\"danger\"\r\n            onClick={() => {\r\n              this.clearMaze();\r\n            }}\r\n          >\r\n            Clear Maze\r\n          </Button>\r\n        </Navbar>\r\n        <Container className=\"bodyContainer\" fluid=\"lg\">\r\n          <Row>\r\n            <Col>\r\n              <div id=\"mazeContainer\" className=\"mazeContainer\">\r\n                {grid.map((row, rowIndex) => {\r\n                  return (\r\n                    <div key={rowIndex}>\r\n                      {row.map((node, nodeIndex) => {\r\n                        const { row, col } = node;\r\n                        return (\r\n                          <Node\r\n                            key={nodeIndex}\r\n                            id={`node-${node.row}-${node.col}`}\r\n                            col={col}\r\n                            row={row}\r\n                          />\r\n                        );\r\n                      })}\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n\r\n              <Container className=\"btnContainer\">\r\n                <Button\r\n                  variant=\"info\"\r\n                  onClick={() => {\r\n                    this.resetMazeGrid(25);\r\n                  }}\r\n                >\r\n                  25x25\r\n                </Button>\r\n                <Button\r\n                  variant=\"info\"\r\n                  onClick={() => {\r\n                    this.resetMazeGrid(15);\r\n                  }}\r\n                >\r\n                  15x15\r\n                </Button>\r\n                <Button\r\n                  variant=\"info\"\r\n                  onClick={() => {\r\n                    this.resetMazeGrid(10);\r\n                  }}\r\n                >\r\n                  10x10\r\n                </Button>\r\n              </Container>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst createGrid = (gridSize) => {\r\n  const nodeGrid = [];\r\n  for (let row = 0; row < gridSize; row++) {\r\n    const rowArr = [];\r\n    for (let col = 0; col < gridSize; col++) {\r\n      rowArr.push(createNode(row, col));\r\n    }\r\n    nodeGrid.push(rowArr);\r\n  }\r\n  return nodeGrid;\r\n};\r\n\r\nconst createNode = (row, col) => {\r\n  return {\r\n    id: `${row},${col}`,\r\n    col,\r\n    row,\r\n    isStart: row === STARTING_NODE_X && col === STARTING_NODE_Y,\r\n    visited: false,\r\n  };\r\n};\r\n","import React from \"react\";\nimport \"./App.css\";\nimport MazeGeneration from \"./MazeGeneration/MazeGeneration\";\n\nfunction App() {\n  return <MazeGeneration />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}